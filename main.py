import telebot
from telebot import types, TeleBot
from models import Database
from config import admins
from sheets import add_to_sheets

bot_token = "6350236655:AAEZ0lIEUc9fTxFK4Hz-Hs4PEwBCdzgSqZc"

bot = TeleBot(bot_token)
requests = {}
bot.set_my_commands([types.BotCommand("/start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
                    types.BotCommand("/request_doctor", "–°—Ç–∞—Ç—å –¥–æ–∫—Ç–æ—Ä–æ–º"),
                    types.BotCommand("/request_operator", "–°—Ç–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º")])

@bot.message_handler(commands=['start'])
def start(message):
    print(message.chat.id)
    print(message.chat.id)
    bot.send_message(message.chat.id, "<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b>\n–ù–∞–ø–∏—à–∏—Ç–µ - <b>–°–æ–∑–¥–∞—Ç—å</b>, —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É.\n–ñ–¥–∏—Ç–µ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫, –µ—Å–ª–∏ –≤—ã –≤—Ä–∞—á.", parse_mode="html")

@bot.message_handler(content_types="text", func=lambda message: message.text.lower() == "—É–¥–∞–ª–∏—Ç—å")
def start_delete(message):
    if str(message.chat.id) in admins:
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.\n<i>79XXXXXXXXX</i>", parse_mode="html")
        bot.register_next_step_handler(message, delete)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!\n\n<b>–û–±—Ä–∞–±–∏—Ç–µ—Ç—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</b>", parse_mode="html")

def delete(message):
    db = Database("database.db")
    try:
        db.del_user(message.text)
        bot.send_message(message.chat.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º {message.text} —É–¥–∞–ª–µ–Ω.")
    except:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.")
        
@bot.message_handler(content_types="text", func=lambda message: message.text.lower() == "—Å–æ–∑–¥–∞—Ç—å")
def animal_type(message):
    db = Database("database.db")
    role = db.get_user_role(message.chat.id)
    if role == "op":
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æüêπ")
        bot.register_next_step_handler(message, contacts)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è!\n\n<b>–û–±—Ä–∞–±–∏—Ç–µ—Ç—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</b>", parse_mode="html")

def contacts(message):
    requests[message.chat.id] = {}
    requests[message.chat.id]["animal_type"] = f"{message.text}"
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ãüìû")
    bot.register_next_step_handler(message, adress)

def adress(message):
    requests[message.chat.id]["contacts"] = f"{message.text}"
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Åüèô")
    bot.register_next_step_handler(message, description)

def description(message):
    requests[message.chat.id]["adress"] = f"{message.text}"
    bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ‚úçÔ∏è")
    bot.register_next_step_handler(message, end_request)

def end_request(message):
    db = Database("database.db")
    #—Ç—É—Ç –Ω–∞–¥–æ –∑–∞–ø–∏—Å–∞—Ç—å –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ —É–∂–µ –≤ –±–¥
    id = db.add_request(requests[message.chat.id]["animal_type"], requests[message.chat.id]['contacts'], requests[message.chat.id]["adress"], message.text, message.chat.id)
    kb = types.InlineKeyboardMarkup()
    button_send = types.InlineKeyboardButton(text="–†–∞–∑–æ—Å–ª–∞—Ç—å", callback_data=f"send_{id}")
    button_cancel = types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{id}")
    kb.add(button_send, button_cancel)
    bot.send_message(message.chat.id, f"–ó–∞—è–≤–∫–∞ <b>‚Ññ{id}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!‚úçÔ∏è\n\n<b>–í–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æüêπ:</b>\n{requests[message.chat.id]['animal_type']}\n\n<b>–ö–æ–Ω—Ç–∞–∫—Ç—ãüìû:</b>\n{requests[message.chat.id]['contacts']}\n\n<b>–ê–¥—Ä–µ—Åüèô:</b>\n{requests[message.chat.id]['adress']}\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ‚úçÔ∏è:</b>\n{message.text}", reply_markup=kb, parse_mode="html")
    
@bot.callback_query_handler(func= lambda call: call.data[0:4] == "send")
def send(call):
    bot.edit_message_reply_markup(chat_id=call.message.chat.id, message_id=call.message.id)
    request_id = call.data[call.data.find("_") + 1:]
    send_requests(request_id, call.message)

@bot.callback_query_handler(func= lambda call: call.data[0:6] == "cancel")
def cancel_send(call):
    request_id = call.data[call.data.find("_") + 1:]
    db = Database("database.db")
    db.del_request(request_id)
    bot.delete_message(call.message.chat.id, call.message.id)
    bot.send_message(call.message.chat.id, f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ <b>‚Ññ{request_id}</b> –æ—Ç–º–µ–Ω–µ–Ω–∞!", parse_mode="html")

def send_requests(id, message):
    db = Database("database.db")
    request = db.get_request(id)
    print(request)
    ids_list = db.get_users_by_role("doc")
    kb = types.InlineKeyboardMarkup(row_width=2)
    button_watch = types.InlineKeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"watch_{id}")
    kb.add(button_watch)
    message_edit = bot.send_message(message.chat.id, "–†–∞—Å—Å—ã–ª–∞—é –∑–∞—è–≤–∫–∏...")
    try:
        ids_list = ids_list[0]
        for id_user in ids_list:
            bot.send_message(id_user, f"–ü—Ä–∏—à–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ ‚Ññ{request['id']}\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É - <b>–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å</b>, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ", reply_markup=kb, parse_mode="html")
            bot.edit_message_text(text="–ó–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!", chat_id=message.chat.id, message_id=message_edit.id)
    except:
        bot.edit_message_text(text="–î–æ–∫—Ç–æ—Ä–æ–≤ –Ω–µ—Ç, –∑–∞—è–≤–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ–∫–æ–º—É.", chat_id=message.chat.id, message_id=message_edit.id)

@bot.callback_query_handler(func= lambda call: "watch" in call.data)
def watch_request(call):
    request_id = call.data[call.data.find('_')+1:]
    db = Database("database.db")
    request = db.get_request(request_id)
    kb = types.InlineKeyboardMarkup(row_width=2)
    button_yes = types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{request_id}")
    button_no = types.InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=f"decline_{request_id}")
    kb.add(button_yes, button_no)
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text=f"–ü—Ä–∏—à–ª–∞ –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ <b>‚Ññ{request['id']}</b>\n\n<b>–í–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æüêπ:</b>\n{request['animal_type']}\n\n<b>–ê–¥—Ä–µ—Åüèô:</b>\n{request['adress']}\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ‚úçÔ∏è:</b>\n{request['description']}", reply_markup=kb, parse_mode="html")
    ops = db.get_users_by_role('op')[0]
    for op in ops:
        bot.send_message(op, f"–ó–∞—è–≤–∫–∞ ‚Ññ{request_id} –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è <b>{call.from_user.first_name} {call.from_user.last_name}</b>", parse_mode="html")


@bot.message_handler(commands=["request_doctor"])
def request_membership_doc(message):
    kb = types.InlineKeyboardMarkup(row_width=2)
    button_accept = types.InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å –¥–æ–∫—Ç–æ—Ä–∞", callback_data=f"docaccept_{message.chat.id}")
    button_decline = types.InlineKeyboardButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å –¥–æ–∫—Ç–æ—Ä–∞", callback_data=f"docdecline_{message.chat.id}")
    kb.add(button_accept, button_decline)
    for admin in admins:
        bot.send_message(admin, f"–ü—Ä–∏—à–ª–∞ –∑–∞—è–≤–∫–∞ –¥–æ–∫—Ç–æ—Ä–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç {message.from_user.first_name} {message.from_user.last_name} \n@{message.from_user.username}", reply_markup=kb)

@bot.message_handler(commands=["request_operator"])
def request_membership_op(message):
    kb = types.InlineKeyboardMarkup(row_width=2)
    button_accept = types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", callback_data=f"opaccept_{message.chat.id}")
    button_decline = types.InlineKeyboardButton(text="–û—Ç–∫–ª–æ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", callback_data=f"opdecline_{message.chat.id}")
    kb.add(button_accept, button_decline)
    bot.send_message(message.chat.id, "<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è!</b>", parse_mode="html")
    for admin in admins:
        bot.send_message(admin, f"–ü—Ä–∏—à–ª–∞ –∑–∞—è–≤–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ—Ç {message.from_user.first_name} {message.from_user.last_name} \n@{message.from_user.username}", reply_markup=kb)

@bot.callback_query_handler(func= lambda call: call.data[0:2] == "op")
def op_request(call):
    if "accept" in call.data:
        db = Database("database.db")
        chat_id = call.data[call.data.find('_') + 1:]
        if db.get_user_role(chat_id) != "op":
            db.add_user(chat_id, role="op")
            kb = types.ReplyKeyboardMarkup()
            button = types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–ºüìû", request_contact=True)
            kb.add(button)
            bot.send_message(chat_id, "–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º, <b>–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ —á–∞—Ç–µ.</b>", reply_markup=kb, parse_mode="html")
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text="–ó–∞—è–≤–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!")
        else:
            bot.send_message(call.message.chat.id, "–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å.")
    elif "decline" in call.data:
        bot.send_message(call.message.chat.id, "–ó–∞—è–≤–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!‚ùå")

@bot.message_handler(content_types=['contact'])
def contact_handler(message):
    print(message.contact.phone_number)
    number = message.contact.phone_number
    chat_id = message.chat.id
    db = Database("database.db")
    db.add_contacts(chat_id, number, message.from_user.username)
    hideBoard = types.ReplyKeyboardRemove()
    bot.send_message(chat_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∞!‚úÖ", reply_markup=hideBoard)

@bot.callback_query_handler(func= lambda call: call.data[0:3] == "doc")
def doc_request(call):
    if "accept" in call.data:
        db = Database("database.db")
        chat_id = call.data[call.data.find('_') + 1:]
        print(call.message.chat.id, db.get_user_role(chat_id))
        if db.get_user_role(chat_id) != "doc":
            print(chat_id)
            stat = db.add_user(chat_id, role="doc")
            kb = types.ReplyKeyboardMarkup()
            button = types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–ºüìû", request_contact=True)
            kb.add(button)
            if stat == "success":
                bot.send_message(chat_id, "–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º, <b>–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ —á–∞—Ç–µ.</b>", reply_markup=kb, parse_mode="html")
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text="–ó–∞—è–≤–∫–∞ –¥–æ–∫—Ç–æ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞!")
            else:
                bot.send_message(chat_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã‚ùóÔ∏è")
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id, text="–ó–∞—è–≤–∫–∞ –¥–æ–∫—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç —Ä–æ–ª—å‚ùóÔ∏è")
        else:
            bot.send_message(call.message.chat.id, "–ó–∞—è–≤–∫–∞ —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω–∞ –¥—Ä—É–≥–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å.")
    elif "decline" in call.data:
        bot.send_message(call.message.chat.id, "–ó–∞—è–≤–∫–∞ –¥–æ–∫—Ç–æ—Ä–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!‚ùå")

@bot.callback_query_handler(func= lambda call: call.data[0:6] == "accept")
def accept_request(call):
    db = Database("database.db")
    request_id = call.data[call.data.find('_') + 1:]
    if not db.is_accepted(request_id):
        db.set_doc_on_request(request_id, call.message.chat.id)
        request = db.get_request(request_id)
        kb = types.InlineKeyboardMarkup()
        button_close = types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"close_{request_id}")
        kb.add(button_close)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.id ,text=f"–ó–∞—è–≤–∫–∞ <b>‚Ññ{request_id}</b> –ø—Ä–∏–Ω—è—Ç–∞ –≤–∞–º–∏!\n\n<b>–í–∏–¥ –∂–∏–≤–æ—Ç–Ω–æ–≥–æüêπ:</b>\n{request['animal_type']}\n\n<b>–ö–æ–Ω—Ç–∞–∫—Ç—ãüìû:</b>{request['contacts']}\n\n<b>–ê–¥—Ä–µ—Åüèô:</b>\n{request['adress']}\n\n<b>–û–ø–∏—Å–∞–Ω–∏–µ‚úçÔ∏è:</b>\n{request['description']}", reply_markup=kb, parse_mode="html")
        excel_num = add_to_sheets([request["id"], request["open_date"], '', request["op_id"], request["doc_id"]])
        db.set_excel_num(request_id, excel_num)
        for chat_id in db.get_users_by_role("op")[0]:
            bot.send_message(chat_id, f"{call.from_user.first_name} {call.from_user.last_name} –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É ‚Ññ{request_id}!")
    else:
        bot.delete_message(call.message.chat.id, call.message.id)
        bot.send_message(call.message.chat.id, f"<b>–ó–∞—è–≤–∫–∞ ‚Ññ{request_id} —É–∂–µ –ø—Ä–∏–Ω—è—Ç–∞ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!</b> –û–∂–∏–¥–∞–π—Ç–µ –¥—Ä—É–≥–∏–µ –∑–∞—è–≤–∫–∏.", parse_mode="html")

@bot.callback_query_handler(func= lambda call: call.data[0:7] == "decline")
def decline_request(call):
    bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.id)

@bot.callback_query_handler(func= lambda call: call.data[0:5] == "close")
def close_request(call):
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∑–∞–∫—Ä—ã—Ç–∏—èüí∏")
    bot.delete_message(call.message.chat.id, call.message.id)
    request_id = call.data[call.data.find("_") + 1:]
    bot.register_next_step_handler(call.message, final_close, request_id)

def final_close(message, request_id):
    db = Database("database.db")
    db.set_close_date_on_request(request_id)
    request_info = db.get_request(request_id)
    print(request_info)
    for chat_id in db.get_users_by_role("op")[0]:
        bot.send_message(chat_id, f"{message.from_user.first_name} {message.from_user.last_name} –∑–∞–∫—Ä—ã–ª –∑–∞—è–≤–∫—É ‚Ññ{request_info['id']}!")
    bot.send_message(message.chat.id, "<b>–í—ã –∑–∞–∫—Ä—ã–ª–∏ –∑–∞—è–≤–∫—É, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>", parse_mode="html")
    contacts_op = db.get_contacts(request_info["op_id"])["username"] if not None else db.get_contacts(request_info["op_id"])["phone"]
    contacts_doc = db.get_contacts(request_info["doc_id"])["username"] if not None else db.get_contacts(request_info["doc_id"])["phone"]
    add_to_sheets([request_info["id"], request_info["open_date"], request_info["close_date"], f"@{contacts_op}", f"@{contacts_doc}", message.text], int(request_info["excel_num"]))

bot.infinity_polling()
